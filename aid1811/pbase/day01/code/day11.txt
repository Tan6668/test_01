

函数式编程 
    函数式编程是指用一系列函数解决问题

    说明：
        用每一个函数完成细小的功能，一系列函数任意组成可以解决大问题
        函数仅接受输入并产生输出，不包含任何能影响输出的内部状态

示例1：


函数的可重入性
    当一个函数没有访问除局部变量以外的变量，则此函数为可重入函数 

    特点：
    输入一定，结果必须一定
    示例2：


高阶函数：
    什么是高阶函数
        满足下列条件中一个的函数即为高阶函数：
        1.函数接受一个或多个作为参数传入
        2.函数返回一个函数

python 內建的高阶函数
    map filter  sorted
map 函数
    map(func, iterable1, iterable2, ...........)
    作用：
    用iterable1, iterable2 中取出的数据用func处理后返回处理后的结果

参数：
    func 数据处理函数
    iterable1， iterable2  可迭代对象
    返回值：
    可迭代对象
    示例3：

说明：
    func函数的形参列表的形参个数与map函数中可迭代对象的个数相关，
    一般func函数的形参个数等于map函数当中的可迭代对象的个数
    示例4：
    生成一个可迭代对象，此可迭代对象可以生成：
    1 ** 4, 2 ** 3, 3 ** 2,  4 ** 1

filter 函数
格式：
    filter(func, iterable)
作用：
    创建一个可迭代对象，此可迭代对象将用func函数对iterable中的数据进行筛选
参数：
    func 筛选函数，有一个形参，通常返回True/False
    iterable   原始的可迭代数据
返回值：
    可迭代对象
示例5：


sorted 函数：
    作用：
    将原可迭代对象的数据进行排序，生成排序后的列表
格式：
    sorted(iterable, key=None, reverse=False)
参数：
    iterable 可迭代对象
    key 函数， 用来提供一个排序的依据值，默认用原值进行比较
                key 函数传入的是要比较的数据对象，返回值为能进行比较的值
    reverse 标志用来设置是否降级排序
示例6：

小结：
    三个高阶函数
        map(func, 可迭代对象1， 可迭代对象2，...)
            对一个或多个可迭代的数据处理
        filter(func,可迭代对象)
            过滤
        sorted(可迭代对象， key=函数， reverse=False))
        排序

 递归 recursion
    递归是指函数直接或间接的调用自身
    
直接调用
    def f():
        f()
间接调用
    def fa():
        fb()
    def fb():
        f(a)

说明：递归一定要控制递归的层数，当符合一定条件时要终止递归
     几乎所有的递归都能用while循环来代替
递归分为两个阶段：
    递推阶段   
        从原问题出发，按递归公式，从未知到已知，最终返回
    回归阶段
        按递归终止条件，逆向带入递归公式，回归到原问题求解

递归的优点：
    递归可以吧问题简单化，让思路更清晰，代码更简洁
    缺点：
        递归因系统环境影响太大，当递归深度太大时，可能会得到不可预知的结果

闭包 closure
    闭包是指引用了此函数外部嵌套函数的变量的函数

闭包必须满足三个条件：
    1.必须有一个内嵌函数
    2.内嵌函数必须引用外部函数中的变量
    3.外部函数返回值必须是嵌套函数

闭包的优缺点
    优点：
    加强封装性，用内部嵌套函数可以使用函数之外的变量而不会被破坏
    缺点：
        由于闭包会使函数中的变量都被保存在内存中，内存消耗量大，所以不能滥用闭包



    



