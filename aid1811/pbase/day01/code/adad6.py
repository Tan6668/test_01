
列表的索引操作：
    index
索引的语法：
    列表[整数表达式]
    用法：
        等同于字符串的索引：
        索引分为正向索引和反向索引,规则与字符串规则完全相同
        示例：
        L [1 ， 2 ， 3 ，4 ， 5]
        print(L[1])   #2
        print(L[-1])   #5

列表的索引赋值操作
    列表是可变的序列，可以通过索引赋值改变列表中的元素
    语法：
    列表[整数表达式]  = 表达式
    示例：
    L = [1, -2, 3, ]

列表的切片
    列表[：]
    列表[::]
    列表的切片是从列表元素中取出相应的元素，重新组成一个新的列表
    列表的切片规则等同于字符串的切片规则
    示例：


列表的切片赋值
    作用：
    可以改变原列表的排序，可以插入，删除和修改数据
    语法：
    列表[切片slice] = 可迭代对象
    说明：
       赋值运算符的右侧必须是可迭代对象
       示例：


del 语句
    用于删除列表中的元素
    语法：
    del 列表[索引]]
    del 列表[切片]
    示例：
    L = [1, 2, 3, 4]
    del L[1]
    del L[2]
    print(L)
说明：
    列表中的元素被删除后，后续元素的索引值会变小，即后续元素前移

列表的切片操作注意事项：
    对于步长不等于1的切片赋值，赋值运算符右侧的可迭代对象提供的元素个数，
    一定要等于切片切出的段数


python3中常用的序列函数
len(seq)   返回序列的长度
man(x)   返回序列的最大值元素(要求每两个元素都能比较大小)
min(x)    返回序列的最小值元素
sum(x)     返回序列中所有元素的和(元素必须为数值类型)
any(x)      真值测试，如果列表中其中一个值为真值，则返回True
all(x)     真值测试，如果列表中所有值为真值才返回True,否则返回False
示例：


序列的相关的函数2
reversed(seq)   返回原序列的返向顺序的可迭对象
sorted(iterable,reverse=Flase) 返回可迭代对象中排序后的对象的列表

示例：
L = [5, 9, 7, 1, 3]
for x in reversed(L):
    print(x)  #3 1 7  9  5
L2 = sorted(L)   #L2 = [1 3 5 7 9]


python3中常用的列表方法(method)
    详见：>>>help(list)


深拷贝 和 浅拷贝
1. 不拷贝
    L1 = [1, 2, [3.1, 3.2]]
    L2 = L1
    L2[1] = 2.2
    print(L2)   #[1, 2.2, [3.1, 3.2]]
    print(L1)   #[1, 2.2, [3.1, 3.2]]


浅拷贝  shallow  copy
浅拷贝是指在复制过程中，只复制一层变量，不会复制深层变量绑定
的对象的复制过程
示例：
  L1 = [1, 2, [3.1, 3.2]]
    L2 = copy(L1) #浅拷贝
    L2[1] = 2.2
    print(L2)   #[1, 2.2, [3.1, 3.2]]
    print(L1)   #[1, 2, [3.1, 3.2]]

深拷贝 deep copy 
深拷贝是指在复制过程中，复制所有变量及变量关联的深层绑定
的对象，实现两个对象完全独立
示例：
    import copy  #倒入复制模块
    L1 = [1, 2, [3.1, 3.2]]
    L2 = copy.deepcopy(L1) #深拷贝
    L2[1] = 2.2
    print(L2)   #[1, 2.2, [3.1, 3.2]]
    print(L1)   #[1, 2, [3.1, 3.2]]


