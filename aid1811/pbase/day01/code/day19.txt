

函数
    issubclass(cls, class_or_tupe))判断一个类是否继承自class　或tuple 中的一个类
    如果cls 是class 或tuple中的一个类的子类，则返回True
    示例：
        class A:
            pass
        class B(A):
            pass
        class C(B):
            pass
        issubclass(C, B) #True
        issubclass(B, C) #False
封装 enclosure
    封装是指隐藏类的实现细节，让使用者不用关心这些细节fengzhuang
    封装的目的是让使用者通过尽可能少的方法（或属性）操作对象

私有属性和方法
    python类中以双下划线开头，不愿意双下划线结尾的标识符为
    私有成员，私有成员只能使用方法来进行访问
示例：

多态　polymophic
    字面意思：　多种状态

状态：
    静态（编译时状态）
    动态（运行时状态）
1.动态　调用方法与对象相关，不与类型相关
2.python 全部的对象都只用"运行时状态（动态）", 没有Ｃ＋＋　语言里的
    "编译时状态（静态）"
  示例：

面向对象编程语言的特征：
    继承
    封装
    多态
面向对象（思想）

多继承　multiple inheritance
语法：
    class 类名（基类名１，　基类名２....）：

说明：
    １．一个子类同时继承多个父类，父类中的方法可以同时被继承下来
    ２．如果两个父类中有同名的方法，而在子类中又没有覆盖此方法
        调用结果难以确定
        示例：

多继承的问题
    标识符冲突的问题
    要谨慎使用多继承

多继承的　MRO 问题
    类的__mro__属性
    此属性用于记录当前类的方法的查找顺序

砖石继承（又名棱形继承）

对象字符串函数的使用
    repr(x)  返回一个符合Python语法规则且能代表此对象的表达式字符串
    通常：
        eval(repr(obj)) == obj  为True 
    
    str(x) 返回一个代表对象的字符串（这个字符串通常是给我阅读的）


函数重写
    什么是函数重写
        在自定义的类内添加相应的方法，让自定义的类创建的对象
        能像內建对象一样进行內建函数操作

对象转字符串函数的重写方法
    repr()函数的重写方法
        def __repr__(self):
            ...
    
    str()函数的重写方法
        def __str__(self):
            ...
str(obj)  函数说明：
    １. str(obj) 函数先查找obj.__str__()方法，调用此方法并返回结果
    ２．如果obj.__str__()方法不存在，则调用obj.__repr__方法并返回结果
    ３．如果obj.__repr__方法不存在，则调用object 类的__str__实例方法显示

内建函数的重写
    __abs__  abs(obj) 函数调用
    __len




数据转换函数重写
    方法名　　　　　　　　　　　　对应函数名
    __complex__              complex(x)
    __int__                 int(x)
    __float__                float(x)
    __bool__                   bool(x)

示例：


布尔测试函数的重写
    格式：
        def __bool__(self):
            return 布尔值
作用：
    用于bool(obj) 函数取值
    用于if 语句真值表达式中
    用于　while 语句的真值表达式中
说明：
    1.当自定义的类有__bool__ 方法时，bool(obj) 调用此方法返回值
    ２．当不存在__bool__ 方法时，bool(obj) 返回


对象的属性管理函数：
    参见文档：　
    内建函数(builtins).html
    函数：　　
    getattr(obj, name[, default])
    hastattr(obj, name)
    setattr(obj, name, value)
    delatter(obj, name)




迭代器（高级）
    什么是迭代器：
        可以通过next 函数取值的对象就是迭代器
    迭代器协议
    　迭代器协议是指对象能够使用next函数获取下一项数据，
    　在没有下一项数据是触发一个StopIteration 异常　来终止
      迭代的约定
迭代器协议实现的方法：
    方法名　　　　　　　　　　　　　　　　对应函数
    def __next__(self)              next(obj)

什么是可迭代对象
    是指能够用iter(obj) 函数返回迭代器的对象叫可迭代对象
可迭代对象内部需要定义__iter__(self)方法来返回迭代器对应的函数
        方法名　　　　　　　　　　　　　　　　　　　　　　对应函数
        def __next__(self):                      next(obj)

