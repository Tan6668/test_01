

异常（基础） Exception
    什么是错误
        错误是指由于逻辑或语法等导致一个程序无法正常执行的问题

    错误的特点：
        有些错误无法预知

    什么是异常
        异常是程序出错时标识的一种状态
        当一场发生时，程序不会再往下执行，而转去调用此函数的地方处理
        此错误并恢复为正常状态
    作用：
        用于信号，通知上层调用者有错误产生需要处理

try 语句的两种用法
    try-except 语句
    try-finally 语句
try-except 语句的语法
    try:
        可能触发异常的语句
    except 错误类型1[as 变量1]:
        异常处理语句1
    except 错误类型2[as 变量2]:
        异常处理语句2
    except (错误类型3， 错误类型4) [as 变量3]
        异常处理3
    ...
    except:
        异常处理语句other
    else:
        未发生异常的语句（此语句在未发生异常时执行）
    finally:
        最终语句(此语句在离开try时一定会被执行)
作用：
    尝试捕获异常，得到错误通知，将程序有异常流程为正常流程并继续执行
说明：
    as 子句用于绑定错误对象的变量，可省略
    except 子句可以有一个或多个，但至少有一个
    else 子句最多只能有一个，也可以省略不写
    finally 子句最多只能有一个，也可以省略不写
示例1:


try_finally 语句
    语法：
    try:
        可能触发异常的语句
    finally:
        最终语句
说明：
    finally 子句不可以省略
    一定不存在except子句
作用：
    通常用try_finally 语句来执行触发异常时一定要执行的语句，
    无论异常是否发生，finally 子句都会被执行
    try_finally 预计不会改程序的正常/异常状态

    示例2：

raise 语句
作用：
    触发一个错误，让程序进入异常状态
    发送错误通知给调用者
语法：
    raise 异常类型
    或
    raise 异常对象
    或
    raise #重新触发上一次异常
说明：
    raise 无参调用通常用于try_except 的except 子句中

    示例3：


assert 语句
语法：
    assert 真值表达式，错误数据
    作用：
    主动检测错误并尽早触发错误
说明：
    当真值表达式为False 用错误数据创建一个AssertionError 
    类型错误，并进入异常状态
等同于：
    if bool  == False:
        raise AssrtionError(数据错误)
示例4：


迭代器 Iterator
什么是迭代器
    迭代器是访问可迭代对象的工具
    迭代器是指iter(obj) 函数返回的对象
    迭代器可以用next(it) 函数获取可迭代对象的数据
迭代器相关函数
    iter(iterable) 从可迭代对象中返回一个迭代器，iterable
    必须是一个能提供迭代器的对象
    next(iterable) 从迭代器iterable 中获取下一个记录，如果
    无法获取下一条记录，则会触发StopIteration异常通知
    说明：
        迭代器只能往前取，不会后退
        用iter函数可以返回一个可迭代对象的迭代器
    示例： 
