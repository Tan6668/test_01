
for 语句
作用：
    用来遍历(经历且只经历一遍）可迭代对象的数据元素


可迭带对象是指能依次获取数据元组的对象
    可迭代对象包括：
        字符串 str
        (以下以后会讲)
        列表 list
        元组 tuple
        字典 dict
        集合set 
        ...
语法：
    for 变量列表 in 可迭代对象： 
        语句块1
    else:
        语句块2
说明：
    1.可迭代对象每次提供一个元素依次赋值给变量列表中的变量，赋值完毕后执行语句块1，
     重复执行此步骤，直到可迭代对象不能提供数据为止
    2.可迭代对象迭代完所有的元素后，执行else子句部分的语句块2，然后退出循环
    3. else 子句部分可以省略不写（同whlie 类似）
    4.当循环内部用break终止循环时，else子句部分的语句不会执行


range函数
函数     说明：
    range(stop)
    用来生成0～stop 区间内的整数，直到stop为止，不包含stop
    rang(start,stop[,step]) 用来生成strat~stop 区间内的整数，直到stop为止，不包含stop
    每个整数间隔step（step可以为负数，但不可以为0)
    作用：
    用来创建一个生成一系列整数的可迭代对象
    说明：
    此函数调用返回回来的对象可以用于for语句取值
    示例：
    range(4)   #生成0, 1, 2,  3 
    rang(3, 6)    #3, 4, 5
    rang(1, 10, 2)    1, 3, 5, 7, 9
    rang(5, 0, -2)    5,  3,  1


for  语句的注意事项
1. for 中range 的调用次序：
    # 请问此程序的打印结果是什么？为什么？
    i = 6
    for x in range(1,i)
        print('x=',x,'i=',i)
        i -= 1
        结果：循环5次，循环次数与i的变化没有关系
2. for语句内的变量可能不会被创建
    for x in  range(4,0):
        print(x)
    else:
        print("循环结束，x=",x)    # 出错，此变量不存在


for 语句嵌套：
    与while 一样，for 语句是语句（复合语句），它可以嵌套到其他复合语句当中
    示例：
        for x in "ABC":
            for y in "123":
                print(x + y)



continue语句
 问题：
    如何让程序不在往下执行，重新开始依次新的循环
 作用：
    用于循环语句(while,for)当中，不在执行本次循环内continue之后的语句，重新开始依次新的循环
    说明：
    在for 语句中执行continue一语句，将会从可迭代对象中取下一个元素，
    绑定变量后再次进行循环
    2.在while语句中执行continue语句，将会直接跳转到真值表达式处，重新判断循环条件
    语法：
    continue


循环小结：
    while 语句
    for  语句
        字符串str
        range()调用后的返回值
    braek 语句(终止循环)
    continue 语句(开始依次新的循环)

列表 list
    什么是列表：
    列表是一种容器
    列表是可以被改变的序列
    列表是由一系列的特定元素组成，元素与元素之间没有任何的关联联系
    他们之间有先后顺序
python序列类型简介
    字符串str
    列表 list
    元组 tuple
    字节串 bytes
    字节数组 bytearray


创建空列表的字面值
    [] 创建空列表
    如：
        L = [] L绑定一个空列表

    创建非空列表的字面值
    L = [1,2,3,4]
    L = ['beijing','shanghai','shenzhen']
    L = [1,"二",3.14]
    
列表的构造函数list
list () 生成一个空列表，等同于[]
list(iterable) 用可迭代对象创建一个列表
示例：
    L = list # L 绑定空列表
    L = list('hello') #L 绑定['h','e',....]
    L = list(range(1,10,2)) # L 绑定1  3 5 7  9 


列表的运算：
    算术运算：
    + += *  *=

    + 用于拼接列表
    x = [1]
    y = [2]
    z = x + y # z [1,2]
    z1 = y + x  # z[2,1]


    += 用于将右侧可迭代对象的数据追加在原列表数据之后：
    语法：
    x += 可迭代对象
    如：
    x = [1,2,3]
    x += [4,5,6]
    x += "ABC"
    x += range(10,13)
    注：
    列表是可变容器，+= 会改变原列表

* 生成重复的列表
x = [1,2] * 3  #x = [1 2 1 2 1 2 ]

*=  用于生成重复的列表
x = [1  2  3]
x *= 2  [ 1 2 3 1 2 3 ]



列表的比较运算：
    运算符：
     < <= > >= == !=
     说明：
     列表的比较规则与字符串的比较规则相同
     列表要求每两个元素能依次进行比较，否则会出现类型错误
     示例：
     x = [1,2,3]
     y = [2,3,4]
     x != y #True
     x < y # True


列表是可迭代对象
    L = [1,3,5,10]
    for x in L:
        print(x)


列表的in/not in 运算符
    判断一个值是否存在于列表中，如果存在返回True，否则返回False
    同字符串的in 运算符，用于检查一个值是否存在于列表中
    示例：
        x = [1,'two',3,'四']
        3 in x  #True

        