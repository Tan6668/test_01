

字符串 str
作用：
    用来记录文字（文本）信息
字符串的表示方式：
    在非注释中凡是用引导括起来的部分都是字符串
    '     单引号
    "     双引号
    '''   三单引号
    """   三双引号
    空字符串的字面值表示方法：
    ''
    ""
    ''''''
    """""'
    注：空字符串的布尔测试值bool(x)为False

    非空字符串的表示方式：
    'hello'
    "hello"
    '''hello'''
    """hello"""
    单引号和双引号的区别：
    单引号内的双引号不算结束符
    双引号内的单引号不算结束符
    示例：
    print("I'm a teacher")  # I'm a teacher
    print('I am "wengmingjie"')  #I am "wengmingjie"

    三引号字符串
        以"""或'''开头和结尾的字符串
        作用：
            三引号内可以包含单引号和双引号
            三引号字符串中的换行会自动转换为换行符'\n'

隐式字符串字面值拼接
    多个字符串值连在一起时,python解释执行器会自动拼接为一个字符串
   s =  "I'm a teacher!"   'my name "wengmingjie"'
    print(s)              #拼接后面的字符串（合在一起)

用转义序列代表特殊字符
字符串字面值中用字符串反斜杠(\)后跟一个或一些字符代表特殊的一个字符
    转义格式    含义
    \'        单引号(')
    \"         双引号(")
    \\         一个反斜杠(\)
    \n         换行符
    \r         返回光标至行首(回车符)
    \f          换页
    \t         水平制表符
    \v         垂直制表符
    \b        倒退
    \a        响铃
    \0         空字符(字符值为零)
    \0oo      oo为两位八进制表示的字符
    \xXX       XX为两位十六进制表示的字符
    \uXXXX      XXXX为四位十六进制表示的UNICDE16字符
    \UXXXXXXXXX      XXXXXXXX为八位十六进制表示的UNICDE32字符

ASCII编码表
    Linux 查看方式
    $ man ascii 

c、常用ASCII  编码：
字符  十进制  十六进制
'0'   48     0x30
'A'    65    0x41
'a'    97    0x61 


python3中字符串默认储存的是UNICODE编码值


序列的概念
    字符串是序列
    序列是有先后顺序的排列
求序列的长度的函数len
    len(s)返回字符串中字符的个数

raw 字符串(原是字符串)
    格式：
        r'字符串内容'
        r"字符串内容"
        r'''字符串内容'''
        r"""字符串内容"""
    作用：
        让转义符号 \ 无效
        示例：
            用字符串形成一个windows下的路径：
                c:\newfile\test.py
            path = 'c:\newfile\test.py'
            print(path)   （错误方法)
             c:\newfile\test.py
            path = r'c:\newfile\test.py'
            print(path)   （正确方法）



字符串的运算
    运算符：
        +  +=  *    *= 
+ 加号运算符用于拼接字符串
    x = "abcd"
    y = '1234'
    z = x + y   #拼接
    print(z)
    a = y  + x 
    print(a)    #两者结果不一样a不同于z


+= 运算符 用原字符串与右侧的字符串拼接生成新的字符串，在用原变量绑定新的字符串




*  运算符 生成重复的字符串
    如：
        x  =  "ABCD"  * 3 
        print(x)   #ABCDABCDABCD
        y = 3  *  "123"
        print(y)  #123123123
    注：字符串只能和整数相乘



*=  运算符    生成重复的字符串，再用变量重新绑定


字符串的比较运算
    运算符：
    <  <=  >  >=  ==  !=
    规则：
    依次按编码值进行两两比较，一旦不同，则比较结束，返回比较结果
    当编码的长度值完全相同时那两个字符串相等
    示例：
    'A' <  'B'   #True
    'ABC' > 'ABB'   #True
    

in /not in 运算符
作用：
    in 用于序列，字典，集合中，用于判断某个值是否存在于容器中，
    如果存在则返回True， 否则返回Flase 
     not in 写in 的返回结果相反
     格式：
     对象 in  序列
     示例：
        x  = 'welcome to tarena '
        ' to '  in x  #True


字符串的索引操作
索引 index 
    python 字符串是不可以改变的序列 

    语法：
    字符串[整数表达式]
    说明:
    python 序列都可以用索引(index) 访问序列中的元素
    python 序列的正向索引是从0开始的，第二个索引为1，，，，，
        最后一个索引为len(s)-1
    python 序列的反向索引是从-1开始的，-1代表倒数第一个-2
    代表倒数第二个，以此类推，第一个是-len(s)
    示例：
    s =  'ABCD'
    print(s[1])  #B 
    print(s[-1])  # D 
切片 slice 
 作用：
    从字符串序列中取出相应的元素重新组成一个字符串序列
语法：
    s[(开始索引b):(结束索引e)(:(步长s))]
    注： () 代表其中可以省去
说明:
    开始索引是切片开始切下的位置，0代表第一个元素，与索引相同
    结束索引是切片的终止索引(不包含终止点)
    步长是切片每次获取完当前元素后移动的方向和偏移量
    1）没有步长，相当于步长1(默认值:1)
    2）当步长为正整数时，取正向切片：
        开始索引默认为0，结束索引是最后一个元素的下一个位置
    3) 当步长为负整数时，取反向切片：
        反向切片时，默认的起始位置为最后一个元素，终止位置为第一个元素的前一个位置


字符串序列相关的函数：
len(x) 返回序列的长度
max(x) 返回序列中的最大值元素
min(x) 返回序列中的最小值元素


字符串编码转换函数：
    ord(c) 返回一个字符c的Unicode的编码值
    chr(i) 返回i这个值对应的字符
    ord('a')   #97
    chr(97)   #a   


整数转为字符串的函数
    bin(i) 将整数转为二进制的字符串
    oct(i) 将整数转为八进制的字符串
    hex(i) 将整数转为十六进制的字符串

字符串的构造函数 str 
    str(obj='')  将对象转为字符串


python3 中常用的字符串方法：
    方法调用语句：
    对象.方法名
    示例：
        'abc'.isalpha()  #正确
        123.isalpha()  #错误