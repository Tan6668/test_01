
元组 tuple
  1.  元组是不可以改变的序列，同list一样，元组是可以存放任意类型数据的容器
  2.  可以认为，元组是不可以改变的的列表

元祖的表示方式:
    用小括号（）括起来，单个元素括起来后加逗号（，）号区分元组还是单个元素
创建空元组：
    （） #创建空元组
创建空元组：
    t = 100,
    t = (200)
    t = (1, 2, 3,)
    t = 100, 200, 300
注： type(x)函数可以返回x 的类型

    t = (20) t 绑定的是20这个整数
    x, y, z = 100, 200, 300  序列赋值，不是元组

元组的构造函数：
    tuple() 生成一个空元组，等同于()
    tuple(iteranle) 用可迭代对象生成一个元组

    示例：
        t = tuple
元组是可迭代对象
    t = tuple("ABC")
    for x in t:
        print(x)
    L = [x for x in t]


元组的运算
    算数运算：
    + += * *=
    用法等同于字符串的算术运算
    如：
    元组的in/not in 运算符
        判断一个值是否存在于元组中，如果存在返回True 否则返回False
        （与列表的in/ not in功能相同） 
    索引 index 
    用法等同于列表的索引
    注：元组不支持索引赋值
    切片：
    用法与列表的切片用法相同
    元组不能切片赋值
    元组切片返回一个新的元组

元组的方法：
    T.index(v[,begin[,end]]) 返回对应元素的索引下标，begin为开始索引，end为结束索引
    当v不存在时会触发错误
    T.count(x) 返回元组中对应的元素个数


    字典：dict
        什么是字典
        字典是一种可变的容器，可以储存任意类型的数据
        2.字典中的每个数据都是用“键”(key) 进行索引，而不是像序列可以用整数下标进行索引
        3.字典内的数据没有先后顺序关系，字典的储存是无序的
        4.字典中的数据一（key）-值（value）对的形式进行映射储存
        5.字典的键不能重复，且只能用不可变类型作为字典的键
    字典的字面值表示方法：
    字典是以{}括起来，以冒号（：）分隔键值对，各键-值对之间用逗号分隔
    创建空字典：
        d = {}
        创建非空字典：
        d = {'姓名':'tarena', '年龄':15}

字典的构造函数：dict
    dict()   创建一个空字典
    dict(itterable)   用可迭代对象初始化一个字典
    dict(**kwargs)   关键字传参形式生成一个字典
    示例：
注： 关键字传参时，关键字的名字必须符合标识符命名规则的字符串

字典的键（key）必须是不可变类型：
    bool int float complex str tuple frozenset（固定集合） 和bytes（字节串）和None对象
可变数据类型：
    list dict set（集合） btearray（字节数组）

字典的键的索引
    用[]运算符可以获取字典内"键"对应的值
    语法：
        v = 字典[键]
        示例：
        
添加和修改字典的元素
    语法：
    字典[键] = 值
    说明：
    如果键不存在，创建键，并绑定键对应的值
    键存在，修改键绑定的值
    示例：
     


     del 语句
        删除字典的键，同时解除与值的绑定关系
        语法：
        del 字典[键]
        示例：
            

字典的成员资格判断in/not in运算符
    可以用in 运算符来判断一个键是否存在于字典中，如果存在则返回True，否则返回False
    not in 与in结果相反

字典的迭代访问
    字典是可迭代对象，字典只能对键进行迭代访问


字典的比较：
> >= < <=  == !=
==字典是否完全相同（键也相同，值也相同则返回True）
！= 与== 返回值相反



可以用于字典的内建函数：
 len(x)     返回字典的键值对的个数
  max(x)    返回字典的键的最大值
  min(x)    返回字典的键的最小值
  sum(x)    返回字典的键的最小值
  any(x)    真值测试，如果字典中其中一个键为真则返回True
  all(x)    真值测试，如果字典所有键为真 则返回True


字典推导式：
    字典推导式是用可迭代对象依次生成字典内元素的表达式

语法：
    {键表达式：值表达式 for 变量 in 可迭代对象 [if 真值表达式]}
    注： []代表内部的内容可以省略
    示例：
    d = {x: x **2 for x in range(1,10)}


字典推导式的嵌套：
    语法规则同列表的推导式

字典 vs 列表
    1.都是可变对象
    2，索引方式不同
    3，字典的插入，删除，修改的速度可能会快于列表
    4，列表的储存是有序的，字典是无序的
    ，