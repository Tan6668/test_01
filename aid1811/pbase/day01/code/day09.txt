
python 函数参数的传递
    把数据给函数
传递方式：
    1.位置传参
      序列传参
    2.关键字传参
      字典关键字传参
位置传参
    实际参数（实参）与形式（形参）的对应关系，是按位置来依次对应的
    示意：
        def mymin(a, b, c):
            pass

        mymin(1,2,3)

说明：
    实参和形参按位置进行匹配
    实参个数与形参个数必须相同
    示例：

序列传参
序列传参是指在函数调用过程中，用*将列表拆解后按位置惊醒参数传递的方式
进行参数传递的方式
说明：
    序列传参时，序列拆解的为止将于形参一一对应


关键字传参
    是指传参时，按着形参的名称给形参赋值
    实参和形参按名称进行匹配
    示例：

说明：
    实参和形参按名称进行匹配，可以不按位置进行匹配
    实参中的关键字要在形参中存在

字典关键字传参
    是指实参为字典，将字典有两个*拆解后进行关键字传参的传递方式
    示例：
   说明：
   1.字典的键名和形参名必须完全一致
   2.字典的键名必须是符合标识符命名规则的字符串
   3.字典的键要在形参中存在

   函数的综合传参
   1.函数的传参方式，在形参能唯一匹配到相应的实参的情况下可以任意组合
   2.函数的位置传参要先于关键字传参
   示例：
函数的参数传递过程
    实参给形参进行赋值传递，并不会复制新的对象
    

可变的数据类型作为函数的参数传递
a = [1, 2, 3]
b = 200
def f2(x,y):
    x.append(y)

f2(a,b)
print(a)
print(b)



--------------------以下讲函数的形参------------------------
函数的缺省参数
    语法：
    def 函数名（形参名1=默认实参1，形参名2=默认实参2....)
        语句块
    示例：

    作用：
    让调用更加方便，无需传入无关的实参
    说明：
        缺省参数必须自右至左依次存在，如果一个参数右缺省参数，则其右侧的
        所有参数都必须右缺省参数，如：
            def error_fn(a, b = 10, c)....错误
        缺省参数可以有0个，一个或多个，甚至全部都有缺省参数

    
函数形参的定义方式：
    1.位置形参
    2.星号元组形参
    3.命名关键字形参
    4.双星号字典形参


位置形参：
    语法：
    def 函数名(形参1，形参2...)：
        语句块

星号元组形参：
    语法：
    def 函数名(*元组形参名)：
        语句块
    作用：
    收集多余的位置传参
    说明：
    元组形参名一般命名为'args'


命名关键字形参
    语法：
    def 函数名（*，命名关键字形参1，命名关键字形参2，...）：
        语句块
    或
    def 函数名（*args，命名关键字形参1，命名关键字形参2，...)
    作用：
        强制所有的参数都必须用关键字传参或字典关键字传参传递
        示例：

双星号字典形参：
    语法：
    def 函数名（**字典形参名）：
        语句块
    作用：
    收集多余的关键字传参
    说明:
    字典形参名一般命名为'kwargs'
    一个函数内字典形参最多只能有一个
    示例：


函数的参数说明：
 位置形参，缺省形参，星号元组形参，双星号字典形参可以混合使用

 函数参数自左至右的顺序为：
 位置形参
 星号元组形参
 命名关键字传参
 双星号字典形参


 可以接受任意的位置传参和关键字传参的形参列表
 def fn(*args,**kwargs):
    print(args,kwargs)


全局变量和局部变量
 局部变量 local variable
    定义在函数内部的变量称为局部变量（函数的形参也是局部变量）
    局部变量只能在函数内部使用
    局部变量在函数调用时才能被创建，在函数调用后会自动销毁
 全局变量 global variable
    定义在函数外部，模块内部的变量称为全局变量
    全局变量，所有函数都可以直接访问（但函数内部不能将其赋值）
